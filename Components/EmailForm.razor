@using System.ComponentModel.DataAnnotations
@using fullstack_portfolio.Data
@using fullstack_portfolio.Models
@using fullstack_portfolio.Components
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using System.Net.Mail
@using System.Net
@inject IConfiguration Configuration


<EditForm Model="model" OnValidSubmit="SendEmail" FormName="EmailForm" class="flex flex-col gap-2 relative">
	<DataAnnotationsValidator />

	@if (result is not null)
	{
		<div class="grid place-items-center w-full h-full absolute top-0 left-0 bg-primary/85">
			<div class="outline outline-current bg-primary/75 backdrop-blur @(result.Success ? "text-secondary-400" : "text-accent")
			rounded-lg w-full shadow-sharp motion-safe:transition-all hover:shadow-sharp-lg">
				<div class="header-bar p-4 flex justify-end gap-2 border-b-4 border-current">
					<div class="w-4 h-4 bg-current rounded-full"></div>
					<div class="w-4 h-4 bg-current rounded-full"></div>
					<div class="w-4 h-4 bg-current rounded-full"></div>
				</div>
				<div class="p-4 pb-20 fill-current">
					<div class="flex gap-2 items-center">
						@if (result.Success)
						{
							<svg width="34" height="34" viewBox="0 0 34 34" xmlns="http://www.w3.org/2000/svg">
								<path fill-rule="evenodd" clip-rule="evenodd"
									d="M7.53076 2.93629C9.38006 1.6771 11.4601 0.796943 13.6509 0.346604C15.8416 -0.103735 18.0998 -0.115348 20.2951 0.312436C22.4904 0.740219 24.5793 1.59893 26.4414 2.83904C28.3036 4.07915 29.902 5.67611 31.1446 7.5378C32.3872 9.39949 33.2492 11.4891 33.6811 13.686C34.113 15.8829 34.1061 18.1437 33.6609 20.338C33.2157 22.5322 32.3409 24.6165 31.087 26.4706C29.8332 28.3247 28.225 29.9119 26.3554 31.1406C22.6196 33.6401 18.045 34.5515 13.6381 33.6743C9.23109 32.7971 5.35268 30.203 2.85606 26.4629C0.359436 22.7228 -0.550896 18.1429 0.325325 13.7308C1.20155 9.31872 3.79497 5.43581 7.53076 2.93629ZM8.87641 29.1271C10.4618 30.1995 12.2433 30.9478 14.1185 31.3287C15.9937 31.7097 17.9255 31.7159 19.8031 31.347C21.6807 30.978 23.4669 30.2412 25.0592 29.1789C26.6514 28.1167 28.0182 26.7498 29.0812 25.157C30.1441 23.5641 30.8821 21.7766 31.2527 19.8973C31.6234 18.018 31.6195 16.0839 31.2411 14.2061C30.8628 12.3283 30.1175 10.5439 29.0481 8.95537C27.9787 7.36687 26.6063 6.00562 25.0097 4.94985C21.8072 2.83204 17.8974 2.06973 14.135 2.82955C10.3726 3.58936 7.06376 5.8095 4.93164 9.00466C2.79953 12.1998 2.01761 16.1101 2.7568 19.8808C3.496 23.6514 5.69618 26.9758 8.87641 29.1271ZM13.3127 14.6154C13.3127 15.258 13.0577 15.8744 12.6038 16.3288C12.15 16.7832 11.5344 17.0385 10.8925 17.0385C10.2506 17.0385 9.63499 16.7832 9.1811 16.3288C8.72722 15.8744 8.47223 15.258 8.47223 14.6154C8.47223 13.9728 8.72722 13.3565 9.1811 12.902C9.63499 12.4476 10.2506 12.1924 10.8925 12.1924C11.5344 12.1924 12.15 12.4476 12.6038 12.902C13.0577 13.3565 13.3127 13.9728 13.3127 14.6154ZM25.4139 14.6154C25.4139 15.258 25.1589 15.8744 24.7051 16.3288C24.2512 16.7832 23.6356 17.0385 22.9937 17.0385C22.3518 17.0385 21.7362 16.7832 21.2823 16.3288C20.8284 15.8744 20.5734 15.258 20.5734 14.6154C20.5734 13.9728 20.8284 13.3565 21.2823 12.902C21.7362 12.4476 22.3518 12.1924 22.9937 12.1924C23.6356 12.1924 24.2512 12.4476 24.7051 12.902C25.1589 13.3565 25.4139 13.9728 25.4139 14.6154ZM16.9431 24.3076C15.6279 24.3108 14.3366 23.9564 13.207 23.2821C12.0774 22.6078 11.1519 21.639 10.5294 20.4792L8.42383 21.6423C9.27127 23.2123 10.5352 24.5176 12.0764 25.4144C13.6176 26.3111 15.3762 26.7644 17.1583 26.7243C18.9404 26.6842 20.6769 26.1523 22.1763 25.1871C23.6757 24.222 24.8798 22.8612 25.6559 21.2546L23.4777 20.2127C22.8824 21.4406 21.9537 22.4759 20.7981 23.2001C19.6424 23.9243 18.3065 24.3081 16.9431 24.3076Z" />
							</svg>
						}
						<h3 class="text-4xl font-bold">@result.Title</h3>
					</div>
					<p>@result.Message</p>
					@if (!result.Success)
					{
						<p>If the problem persists, contact me directly from the email address provided in this section</p>
						<button type="button" class="px-4 py-2 bg-accent rounded-md text-primary"
							@onclick="() => result = null">
							Retry
						</button>
					}
				</div>
			</div>
		</div>
	}

	<label class="flex flex-col">
		Name
		<InputText @bind-Value="model.Name" class="bg-transparent border-2 border-primary-700 px-4 py-2 rounded-md" />
		<ValidationMessage For="@(() => model.Name)" class="text-accent" />
	</label>

	<label class="flex flex-col">
		Email
		<InputText @bind-Value="model.FromAddress"
			class="bg-transparent border-2 border-primary-700 px-4 py-2 rounded-md" />
		<ValidationMessage For="@(() => model.FromAddress)" class="text-accent" />
	</label>

	<label class="flex flex-col">
		Subject
		<InputText @bind-Value="model.Subject"
			class="bg-transparent border-2 border-primary-700 px-4 py-2 rounded-md" />
		<ValidationMessage For="@(() => model.Subject)" class="text-accent" />
	</label>

	<label class="flex flex-col">
		Message
		<InputTextArea @bind-Value="model.Message"
			class="bg-transparent border-2 border-primary-700 px-4 py-2 rounded-md min-h-32" />
		<ValidationMessage For="@(() => model.Message)" class="text-accent" />
	</label>

	<InputText @bind-Value="model.HoneyPot" class="hidden" />

	<hr class="border-primary-700 my-4 opacity-75" />

	<button type="submit" class="bg-gradient-to-r from-secondary-900 to-accent rounded-md px-4 py-2">
		Send
	</button>
	<button type="submit" class="border-2 border-primary-700 rounded-md 
          px-4 py-2">
		Clear
	</button>

	@if (IsLoading)
	{
		<div class="flex flex-col justify-center items-center absolute top-0 left-0 w-full h-full bg-primary/75">
			<p class="text-2xl">Sending Email</p>
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 300 150"
				class="max-w-xs fill-transparent stroke-secondary">
				<path stroke-width="15" stroke-dasharray="300 385" stroke-dashoffset="0"
					d="M275 75c0 31-27 50-50 50-58 0-92-100-150-100-28 0-50 22-50 50s23 50 50 50c58 0 92-100 150-100 24 0 50 19 50 50Z">
					<animate attributeName="stroke-dashoffset" calcMode="spline" dur="2.25" values="685;-685"
						keySplines="0 0 1 1" repeatCount="indefinite"></animate>
				</path>
			</svg>
			<p>Hold on tight, sunshine</p>
		</div>
	}

</EditForm>

@code {
	[SupplyParameterFromForm]
	public Email model { get; set; } = new Email();

	public class Email
	{
		[Required(ErrorMessage = "Enter your name or a nickname")]
		[MinLength(3)]
		[DataType(DataType.Text)]
		public string Name { get; set; } = "";
		[Required(ErrorMessage = "Please enter your email address")]
		[EmailAddress(ErrorMessage = "The email address has to be valid")]
		[Display(Name = "Email Address")]
		public string FromAddress { get; set; } = "";
		[Required]
		[MinLength(3)]
		[DataType(DataType.Text)]
		public string Subject { get; set; } = "";
		[Required]
		[MinLength(10)]
		[MaxLength(2048)]
		[DataType(DataType.MultilineText)]
		public string Message { get; set; } = "";
		public string HoneyPot { get; set; } = "";
	}
	public class Result
	{
		public bool Success { get; set; }
		public string Title { get; set; } = "Thank You";
		public string Message { get; set; } = "The email was sent successfully";
	}
	public Result? result { get; set; } = null;

	// configuration variables
	private string? _email => Configuration["Email:Address"];
	private string? _password => Configuration["Email:Password"];
	private string? _recipient => Configuration["Email:Recipient"];

	// state variables
	private bool IsLoading { get; set; }

	public async void SendEmail()
	{
		// check for honey pot, it is there for spam prevention
		// by bots and what not
		if (!string.IsNullOrWhiteSpace(model.HoneyPot))
		{
			Console.WriteLine("HoneyPot was filled");
			return;
		}

		IsLoading = true;
		StateHasChanged();
		using SmtpClient _smtpClient = new("smtp.gmail.com");
		_smtpClient.UseDefaultCredentials = false;
		_smtpClient.Port = 587;
		_smtpClient.Credentials = new NetworkCredential(_email, _password);
		_smtpClient.EnableSsl = true;

		MailMessage mailMessage;
		try
		{
			mailMessage = await ComposeMessage();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error composing email - {DateTime.Now}");
			Console.WriteLine(ex.Message);
			result = new Result
				{
					Success = false,
					Title = "Internal Error",
					Message = "Could not compose the email. Please try again."
				};
			IsLoading = false;
			StateHasChanged();
			return;
		}

		try
		{
			await _smtpClient.SendMailAsync(mailMessage);
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error sending email - {DateTime.Now}");
			Console.WriteLine(ex.Message);
			result = new Result
				{
					Success = false,
					Title = "Error Sending Email",
					Message = "Something went wrong trying to send the email. Please try again."
				};
			IsLoading = false;
			StateHasChanged();
			return;
		}

		Console.WriteLine($"{model.Name} ({model.FromAddress}) sent an email to {_recipient} at {DateTime.Now}");
		result = new Result
			{
				Success = true,
				Title = "Thank You!",
				Message = "The email was sent successfully"
			};
		IsLoading = false;
		StateHasChanged();
	}

	public async Task<MailMessage> ComposeMessage()
	{
		if (_email is null || _password is null || _recipient is null)
			throw new ArgumentNullException("Email Configuration is not set up properly");

		MailMessage mailMessage = new()
			{
				From = new MailAddress(_email),
				Subject = model.Subject,
				Body = model.Message,
				IsBodyHtml = false,
			};

		mailMessage.To.Add(_recipient);

		var body = await RenderEmail();

		// Add the alternate body to the message.
		// this allows the email to be sent as HTML while including
		// a plain text as well.
		var mimeType = new System.Net.Mime.ContentType("text/html");
		AlternateView alternate = AlternateView.CreateAlternateViewFromString(body, mimeType);
		mailMessage.AlternateViews.Add(alternate);

		return mailMessage;
	}

	public async Task<string> RenderEmail()
	{
		IServiceCollection Services = new ServiceCollection();
		Services.AddLogging();
		IServiceProvider ServiceProvider = Services.BuildServiceProvider();
		ILoggerFactory loggerFactory = ServiceProvider.GetRequiredService<ILoggerFactory>();

		await using HtmlRenderer renderer = new(services: ServiceProvider, loggerFactory: loggerFactory);

		var html = await renderer.Dispatcher.InvokeAsync(async () =>
		{
			var dict = new Dictionary<string, object?>
			{
{ "Name", model.Name },
{ "SenderEmail", model.FromAddress },
{ "Subject", model.Subject },
{ "Message", model.Message },
			};
			var parameters = ParameterView.FromDictionary(dict);
			var output = await renderer.RenderComponentAsync<EmailBase>(parameters);

			return output.ToHtmlString();
		});
		return html ?? throw new Exception("Rendered HTML is null");
	}

}
