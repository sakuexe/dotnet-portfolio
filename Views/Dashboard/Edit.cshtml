@using System.ComponentModel.DataAnnotations;
@using System.Reflection;
@using fullstack_portfolio.Data;
@model IMongoModel

@{
  var id = @Model.GetType().GetProperty("_id")?.GetValue(Model);
  var collection = Context.Request.Path.Value?.Split("/")[2];
  bool ModelHasFileInput = false;
  bool IsFile(PropertyInfo property)
  {
    var dataTypeAttribute = property.GetCustomAttribute<DataTypeAttribute>();
    if (dataTypeAttribute == null)
      return false;
    bool isFile = dataTypeAttribute.DataType == DataType.ImageUrl;
    ModelHasFileInput = isFile;
    return isFile;
  }

  string TrimPath(PropertyInfo property)
  {
    var path = property.GetValue(Model)?.ToString();
    if (!string.IsNullOrEmpty(path) && path.Contains("wwwroot"))
    {
      path = path.Split("wwwroot")[1];
    }
    return path ?? "";
  }

  bool IsTextArea(PropertyInfo property)
  {
    var dataTypeAttribute = property.GetCustomAttribute<DataTypeAttribute>();
    if (dataTypeAttribute == null)
      return false;
    return dataTypeAttribute.DataType == DataType.MultilineText;
  }
}


<section>
  <form id="edit" action="/dashboard/@collection/@id/save" method="post" enctype="multipart/form-data" class="grid">
    @foreach (var field in Model.GetType().GetProperties())
    {
      if (field.Name == "_id")
      {
        <input asp-for="@field" name="@field.Name" value="@id" hidden aria-hidden="true" />
        continue;
      }
      <div class="flex flex-col">

        @if (field.PropertyType.IsEnum)
        {
          <label for="@field.Name">@field.Name</label>
          @Html.DropDownList(field.Name, new SelectList(Enum.GetValues(field.PropertyType)),
                 "Select " + field.Name, new { @class = "bg-primary border-2 border-primary-700" })
        }

        else if (IsTextArea(field))
        {
          <label for="@field.Name">@field.Name</label>
          @Html.TextArea(field.Name, field.GetValue(Model)?.ToString(), new { @class = "bg-transparent border-2 border-primary-700", @rows = 5})
        }

        else if (IsFile(field))
        {
          <div class="flex gap-2 items-center">
            <label for="file">@field.Name</label>
            <p class="opacity-75 text-sm">
              Current: <a href="@TrimPath(field)">@TrimPath(field)</a>
            </p>
          </div>
          <input type="file" id="file" name="file" value="@field.GetValue(Model)"></input>
        }

        else
        {
          <label for="@field.Name">@field.Name</label>
          <input asp-for="@field" name="@field.Name" value="@field.GetValue(Model)" id="@field.Name"
            class="bg-transparent border-2 border-primary-700" />
        }
        <span data-valmsg-for="@field.Name" data-valmsg-replace="true" class="text-red-500 field-validation-valid"></span>
      </div>
    }
    <button type="submit">Save</button>
    <button type="submit">Remove (todo)</button>
    <span id="general-error" class="text-red-500"></span>
  </form>
</section>

@section Scripts {
  <script src="~/js/savechanges.js" defer></script>
}
