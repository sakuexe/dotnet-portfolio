@using fullstack_portfolio.Models
@using fullstack_portfolio.Utils
@model Project

@{
  var context = (HttpContext)Context;
  string? GetImageUrl(string? rawUrl)
  {
    if (string.IsNullOrWhiteSpace(rawUrl))
      return null;
    if (!System.IO.File.Exists(rawUrl))
      return null;
    return Url.Content(rawUrl.Split("wwwroot")[1]);
  }

  string DefaultIcon = "wwwroot/icons/link.svg";

  string GetSvgPath(string? name)
  {
    if (string.IsNullOrWhiteSpace(name))
      return DefaultIcon;
    name = name.Replace(" ", "-");
    var path = "wwwroot/icons/" + name.ToLower() + ".svg";
    if (!System.IO.File.Exists(path))
      return DefaultIcon;
    return path;
  }
}

<section class="no-container mt-16 max-w-content mx-auto">

  <div class="max-h-96 overflow-clip relative w-full 
    h-full shadow-inner aspect-video motion-safe:transition-[max-height]">
    @if (GetImageUrl(Model.ImageUrl) is null)
    {
      <div 
        class="grid-pattern opacity-50 w-full aspect-video">
      </div>
      <div class="w-full h-1/2 bg-gradient-to-t from-primary to-transparent 
      absolute bottom-0 left-0 z-10"></div>
    }
    else
    {
      <img src="@GetImageUrl(Model.ImageUrl)" loading="lazy" decoding="async"
        id="portfolio-image"
        alt="@(Model.AltText ?? $"Image of the {Model.Title} project")"
        class="w-full h-full object-cover saturate-0
        motion-safe:transition-all motion-safe:group-hover:scale-110 group-hover:saturate-50">
      <button type="button" id="expand" 
        class="absolute bottom-0 right-0 bg-primary px-6 py-2 rounded-tl-xl z-20 ">Expand</button>
      <div class="w-full h-1/2 bg-gradient-to-t from-primary to-transparent 
      absolute bottom-0 left-0 z-10 max-h-40 opacity-50"></div>
    }
    <!-- Color the black and white images to match the theme -->
    <div class="bg-secondary h-full w-full opacity-25 mix-blend-multiply
    absolute bottom-0 left-0 motion-safe:transition-all group-hover:opacity-25">
    </div>
  </div>

  <div class="px-5 py-8 grid gap-y-6 gap-x-16 sm:px-10 xl:grid-cols-3">
    <div class="space-y-6 xl:col-span-2">
      <div class="subheader">
        <p><span>//</span> Project</p>
        <h1>@Model.Title</h1>
      </div>

      <div class="flex flex-wrap gap-2">
        @foreach (var tag in Model.Tags)
        {
          <span class="border border-secondary px-6 py-1.5 rounded-full cursor-default
            select-none capitalize motion-safe:transition-all hover:bg-secondary">@tag</span>
        }
      </div>

      <div class="flex gap-2 items-center">
        <span class="opacity-75 italic">@Model.FinishedAt</span>
        <hr class="w-full border-primary-700">
      </div>

      <div class="space-y-6">
        @foreach (var desc in Model.Description?.Split("\n") ?? new string[0])
        {
          <p>@desc</p>
        }
      </div>
    </div>

    <hr class="border-primary-700 xl:hidden">

    <div class="flex gap-y-6 gap-x-16 flex-wrap content-start py-6 px-4 
      border-primary-700 rounded-lg">
      <div>
        <div>
          <p><span class="text-secondary-400">//</span> Credits</p>
          <h2 class="text-4xl font-bold font-sans">The Team</h2>
        </div>
        @if (Model.Team.Count == 0)
        {
          <p>Just me</p>
        }
        @foreach (var role in Model.Team.GroupBy(m => m.Role).OrderByDescending(r => r.Count()))
        {
          <p class="capitalize">@(role.First().Role):</p>
          @foreach (var member in role)
          {
            <div class="flex gap-2 items-center">
              <ul>
                <li>
                  <span class="capitalize">@member.Name</span> 
                  @if (!string.IsNullOrWhiteSpace(member.Link))
                  {
                  <span>-</span>
                  <a href="@member.Link" target="_blank" class="italic">@LinkUtils.GetDomain(member.Link ?? "")</a>
                  }
                </li>
              </ul>
            </div>
          }
        }
      </div>

      <div>
        <div>
          <p><span class="text-secondary-400">//</span> Links</p>
          <h2 class="text-4xl font-bold font-sans">Find out more</h2>
        </div>
        <ul class="space-y-2">
          @if (Model.Links.Count == 0)
          {
            <li>No links found</li>
          }
          @foreach (var link in Model.Links)
          {
            var result = LinkUtils.SplitLink(link);
            if (result == null)
              continue;
            (string name, string url) = result.Value;
            <li class="flex gap-2 flex-wrap">
              <div class="flex gap-2 items-center">
                <div class="w-7 h-7 fill-secondary-400">
                  @Html.Raw(SvgUtils.SanitizeSvg(GetSvgPath(name)))
                </div>
                <span class="capitalize">@name:</span>
              </div>
              <a href="@url" target="_blank">@LinkUtils.GetDomain(url)</a>
            </li>
          }
        </ul>
      </div>

    </div>

  </div>
</section>

@section Scripts {
  <script src="~/js/expandimage.js" defer></script>
}

@section MetaTags {
  @if (Model.Description?.Length > 160)
  {
    <meta name="description" content="@Model.Description.Substring(0, 160)...">
    <meta name="og:description" content="@Model.Description.Substring(0, 160)...">
  }
  else
  {
    <meta name="description" content="@Model.Description">
    <meta name="og:description" content="@Model.Description">
  }
  <meta name="og:title" content="@Model.Title - Saku Karttunen">
  <meta name="keywords" content="Portfolio, @String.Join(", ", Model.Tags)">
  <meta name="robots" content="index, follow">
  <link rel="canonical" href="https://@(context.Request.Host)portfolio/">
}
